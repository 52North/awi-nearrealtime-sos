buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'org.eclipse.jetty:jetty-runner:9.3.14.v20161028'
        classpath "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.13.1"
    }
}

allprojects  {
    apply plugin: 'maven'

    group = "org.n52.sensorweb.awi"
    version = "1.0.0-SNAPSHOT"

    defaultTasks 'clean', 'install'

    ext {
        icelandVersion = "2-SNAPSHOT"
        sosVersion = "5.0.0-SNAPSHOT"
        slf4jVersion = "1.7.21"
        springVersion = "4.2.3.RELEASE"
        resteasyVersion = "3.0.18.Final"
        hibernateVersion = "4.3.11.Final"
        jaxrsVersion = "2.0.1"
        logbackVersion = "1.1.7"
        corsFilterVersion = "2.5"
        servletApiVersion = "3.1.0"
        guavaVersion = "18.0"
        jtsVersion = "1.13"
        jodaVersion = "2.9.4"
        jacksonVersion = "2.7.0"
    }
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'com.github.hierynomus.license'

    tasks.processResources.dependsOn licenseFormat


    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
        maven { url 'https://52north.org/maven/repo/releases' }
        maven { url 'https://52north.org/maven/repo/snapshots' }
    }

    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }


    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = "sources"
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = "javadoc"
        from javadoc.destinationDir
    }

    artifacts {
        archives javadocJar
        archives sourcesJar
    }

    compileJava {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
        options.encoding = 'UTF-8'
        options.deprecation = true
        options.warnings = true
        options.compilerArgs = ['-Xlint:all']
    }

    configurations.all {
        dependencies.withType(ExternalDependency) {
            exclude module: 'jboss-logging'
            exclude module: 'commons-logging'
            exclude module: 'hamcrest-core'
            exclude module: 'iceland'
        }
    }

    dependencies {
        testCompile "org.hamcrest:hamcrest-all:1.+"
        testCompile "junit:junit:4.+"
    }

    license {
        ext {
            year = Calendar.getInstance().get(Calendar.YEAR)
            company = '52Â°North GmbH'
        }
        header rootProject.file('etc/license-header.txt')
        mapping { java = 'SLASHSTAR_STYLE' }
        include '**/*.java'
    }
}

project(':nrt') {
    description = 'nrt'
}

project(':webapp') {
    description = 'webapp'
    apply plugin: 'java'
    apply plugin: 'war'

    configurations { jetty }

    dependencies {}

    defaultTasks 'jetty'

    // simple execution with gradle jetty
    task jetty(type: JavaExec, dependsOn: war) {
      main = 'org.eclipse.jetty.runner.Runner'
      args = ['--port', 9000, '--path', '/', war.archivePath]
      //classpath configurations.jetty
  }
}